type Block
    line [Token]
    subBlocks [Block]

func next(block Block, :tokenIndex UInt64) Token
    attributes
        alwaysInline
    if < tokenIndex >= block.line.getLength()
        then errorNotExpectedEOL(block.line.getLast(), "")
    result = block.line[tokenIndex]
    tokenIndex++

proc next!(block Block, :tokenIndex UInt64, variant [UInt8])
    attributes
        alwaysInline
    if < !block.next?(tokenIndex, variant)
        then if tokenIndex < block.line.getLength()
            then errorNotExpectedToken(block.line[tokenIndex], variant)
            else errorNotExpectedEOL(block.line.getLast(), variant)

func next?(block Block, :tokenIndex UInt64, variant [UInt8]) Bool
    attributes
        alwaysInline
    if tokenIndex < block.line.getLength()
        then if token .= block.line[tokenIndex]; token[] == variant
            then
                result = true
                tokenIndex++

proc subBlocks!(block Block)
    attributes
        alwaysInline
    if < block.subBlocks.getLength() == 0
        then
            token .= block.line[0]
            errorExpectSubBlock(token.file, token.line + 1)

proc noSubBlocks!(block Block)
    attributes
        alwaysInline
    if < block.subBlocks.getLength() != 0
        then errorNotExpectedToken(block.subBlocks[0].line[0], "")

proc eol!(block Block, tokenIndex UInt64)
    attributes
        alwaysInline
    if < tokenIndex < block.line.getLength()
        then errorNotExpectedToken(block.line.getLast(), "")

func getVersion(block Block) [UInt8]
    attributes
        alwaysInline
    tokenIndex := 1
    block.next!(tokenIndex, "=")
    result = block.getString(tokenIndex)
    block.eol!(tokenIndex)

func getCCompilerOptions(block Block) [UInt8]
    attributes
        alwaysInline
    tokenIndex := 1
    block.next!(tokenIndex, "=")
    result = block.getString(tokenIndex)
    block.eol!(tokenIndex)

func getExecutable(block Block) [UInt8]
    attributes
        alwaysInline
    tokenIndex := 1
    block.next!(tokenIndex, "=")
    result = block.getString(tokenIndex)
    block.eol!(tokenIndex)

func getString(block Block, :tokenIndex UInt64) [UInt8]
    attributes
        alwaysInline
    token .= block.next(tokenIndex)
    if < token[][0] != '\042'
        then errorNotExpectedToken(token, "")
    result = token[].getAllExceptFirst().getAllExceptLast()

func getFlagName(block Block, :tokenIndex UInt64) Token
    attributes
        alwaysInline
    result = block.next(tokenIndex)
    nameCorrect := result[][0].lower?()
    if > nameCorrect
        then
            parse _, char <- result[].getAllExceptFirst()
                nameCorrect = nameCorrect && (char.letter?() || char.digit?() || char == '_')
            nameCorrect = nameCorrect && !result[].contain?("__")
            if > nameCorrect
                then nameCorrect = !result[].hasPrefix?("builtIn")
    if < !nameCorrect
        then errorWrongName(result, "flag")
