proc makeDirectory(directory)
    include
        #include <sys/stat.h>
        #include <string.h>
        #include <errno.h>
    rules
        final = directory == [UInt8]
    directoryNameLength .= directory.getLength()
    error := false
    C
        char zeroEndedDirectoryName[directoryNameLength_ + 1];
        memcpy(zeroEndedDirectoryName, directory_.items, directoryNameLength_);
        zeroEndedDirectoryName[directoryNameLength_] = 0;
        error_ = mkdir(zeroEndedDirectoryName, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) != 0;
        if (error_){
            error_ = errno != EEXIST;
        }
    if error
        then errorCantMakeDirectory(directory)

proc makeFile(fileName, fileData)
    rules
        final = fileName == [UInt8] & fileData == [UInt8]
    if !fileData.convertTo(BinaryData).writeToFile(fileName)
        then errorCantWriteToFile(fileName)

proc deleteFile(name)
    include
        #include <stdio.h>
        #include <string.h>
    rules
        final = name == [UInt8]
    length .= name.getLength()
    C
        char buffer[length_ + 1];
        memcpy(buffer, name_.items, length_);
        buffer[length_] = 0;
        remove(buffer);

proc deleteDirectory(name)
    include
        #include <stdio.h>
        #include <string.h>
    rules
        final = name == [UInt8]
    length .= name.getLength()
    C
        char buffer[length_ + 1];
        memcpy(buffer, name_.items, length_);
        buffer[length_] = 0;
        remove(buffer);

func getPath(file)
    rules
        final = file == [UInt8]
        result = [UInt8]
    if lastSeparator .= file.lookLast('/'); lastSeparator.item?()
        then result = file.getFirstN(lastSeparator[] + 1)

func getCineModulePath()
    rules
        result = [UInt8]
    result = "/opt/cine/modules/"

func getCineBinaryPath()
    rules
        result = [UInt8]
    result = "/usr/bin/"

func getFilesFromDirectory(directoryName, errorCoordinates)
    include
        #include <dirent.h>
        #include <string.h>
    rules
        final = directoryName == [UInt8] & errorCoordinates == Token
        result = [[UInt8]]
    directoryNameLength .= directoryName.getLength()
    error := false
    C
        char zeroEndedDirectoryName[directoryNameLength_ + 1];
        memcpy(zeroEndedDirectoryName, directoryName_.items, directoryNameLength_);
        zeroEndedDirectoryName[directoryNameLength_] = 0;
        DIR* directory = opendir(zeroEndedDirectoryName);
        error_ = directory == NULL;
    if error
        then errorCouldNotOpenDirectory(errorCoordinates.replaceValue(directoryName))
    string := ""
    stringLength := 0
    C
        for (;;) {
            struct dirent* directoryEntry = readdir(directory);
            if (directoryEntry == NULL) {break;}
            if (directoryEntry->d_type == DT_REG) {
                stringLength_ = strlen(directoryEntry->d_name);
    string = [UInt8].init(stringLength)
    C
        memcpy(string_.items, directoryEntry->d_name, stringLength_);
    result += directoryName + string
    C
        }
        }
        if (!error_) {
            closedir(directory);
        }

func askTheUser(flagsFile)
    rules
        final = flagsFile == [UInt8]
        result = [UInt8]
    if flagsFile.getLength() != 0
        then parse _, line <- flagsFile.asString().split('\n').getAllExceptLast()
            spaceIndex .= line.look(' ')[]
            flagName .= line.getFirstN(spaceIndex)
            description .= line.getAllExceptFirstN(spaceIndex + 1)
            print("flag: ", flagName, "\ndescription: ", description, "\n")
            for
                print("Enter \042true\042 or \042false\042.\n")
                userInput .= getLineFromSTDIN()
                if userInput == "true" || userInput == "false"
                    then
                        result:join("#define __FLAG_", flagName, " ", select(userInput == "true", "1", "0"), "\n")
                        break 2
                print("Incorrect value. Try again.\n")

func saveToTmpFile(file, executable)
    rules
        final = file == [UInt8] & executable == [UInt8]
        result = [UInt8]
    result = "/tmp/".join(executable, ".c")
    if !file.convertTo(BinaryData).writeToFile(result)
        then errorCantWriteToFile(result)

proc compileCFile(cFileName, cCompilerOptions, executable)
    include
        #include <stdlib.h>
        #include <stdio.h>
    rules
        final = cFileName == [UInt8] & cCompilerOptions == [UInt8] & executable == [UInt8]
    executableFullName .= getCineBinaryPath().join(executable, "" + UInt8)
    execString .= "clang ".join(cCompilerOptions, " ", cFileName, " -o ", executableFullName)
    error := false
    C
        system((char*)execString_.items);
        FILE* file = fopen((char*)executableFullName_.items, "r");
        error_ = file == NULL;
        if (!error_){
            fclose(file);
        }
    if error
        then errorExecutableNotExist(executableFullName.getAllExceptLast())
