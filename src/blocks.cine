func getSources(blocks [Block], feiFileName [UInt8]) [[UInt8]]
    parse _, block <- blocks
        block.noSubBlocks!()
        tokenIndex := 0
        module .= block.getString(tokenIndex)
        block.eol!(tokenIndex)
        mif
            < module.getLength() < 2
                errorNotExpectedToken(block.line[0], "")
            module[0] == '-'
                if directoryItems .= (getCineModulePath() + module.getAllExceptFirst()).getDirectoryItems(); > directoryItems.item?()
                    then parse _, item <- directoryItems[]
                        if !item.second
                            then result += item.first
                    else errorWrongDirectory(module.getAllExceptFirst())
            module.getLast() == '/'
                if directoryItems .= module.getDirectoryItems(); > directoryItems.item?()
                    then parse _, item <- directoryItems[]
                        if !item.second
                            then result += item.first
                    else errorWrongDirectory(module.getAllExceptLast())
            default
                result += feiFileName.getPath() + module
    if < result.getLength() == 0
        then errorSourcesNotExist()

func getFlags(blocks [Block]) [Pair([UInt8], Bool)]
    flagsNames := Set([UInt8])
    parse _, block <- blocks
        block.noSubBlocks!()
        tokenIndex := 0
        flagName .= block.getFlagName(tokenIndex)
        if < flagsNames[flagName[]]
            then errorAlreadyExist(flagName, "flag")
        flagsNames += flagName[]
        block.next!(tokenIndex, "=")
        value .= block.next(tokenIndex)
        block.eol!(tokenIndex)
        if < value[] != "true" && value[] != "false"
            then errorNotExpectedToken(value, "")
        result += Pair([UInt8], Bool).create(flagName[], select(value[] == "true", true, false))
