type ModulePackage
    name, version [UInt8]
    modules [Module]

func load(packageType ModulePackage, fileName [UInt8]) packageType
    packageBox .= loadFile(fileName)
    if < packageBox.empty?()
        then errorCantLoadFile(fileName)
    package .= packageBox[]
    position := 0
    if < UInt64.getFromBinaryData(package, position) != getModulePackageID()
        then errorNotValidPackage(fileName)
    result:name = [UInt8].getFromBinaryData(package, position)
    result:version = [UInt8].getFromBinaryData(package, position)
    result:modules = [Module].getFromBinaryData(package, position)

proc save(package ModulePackage, fileName [UInt8])
    data := BinaryData
    data += getModulePackageID()
    data += package.name
    data += package.version
    data += package.modules
    makeFile(fileName, data.convertTo([UInt8]))

func getModulePackageID() UInt64
    attributes
        alwaysInline
    C
        const uint8_t buffer[] = "mdFEIv0";
        result_ = '0';
        for (int index = 6; index != -1; index--){
            result_ <<= 8;
            result_ |= buffer[index];
        }
