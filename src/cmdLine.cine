func version() [UInt8]
    attributes
        alwaysInline
    result = "0.1"

func helpMessage() [UInt8]
    attributes
        alwaysInline
    result = "Fei - installer and package builder for programs written in the cine programming language.\n"{
        "    fei new PROJECT_NAME - create a new project in the current directory.\n"
        "    fei build FILE - build the project according to the instructions specified in the file, if the file is not specified, then use the file \042release.fei\042.\n"
        "        --ccopy FILE - save the copy of '.c' file."
        "    fei install FILE - Install the program from the file.\n"
        "    -h or --help - show help\n"
        "    -v or --version - show version\n"
    }

func getActionAndData() ActionAndData
    arguments .= getCMDArguments()
    if arguments.getLength() == 0
        then showMessage(helpMessage())
        else
            argumentIndex := 1
            case arguments[0] of
                "-v"; "--version"
                    arguments.eoa!(argumentIndex)
                    showMessage(version())
                "-h"; "--help"
                    arguments.eoa!(argumentIndex)
                    showMessage(helpMessage())
                "new"
                    result:action = a_New
                    result:data = arguments.next(argumentIndex).convertTo(BinaryData)
                    arguments.eoa!(argumentIndex)
                "build"
                    result:action = a_Build
                    ccopy := ""
                    feiFile := ""
                    for !arguments.eoa?(argumentIndex)
                        if arguments.next?(argumentIndex, "--ccopy")
                            then if > ccopy == ""
                                then ccopy = arguments.next(argumentIndex)
                                else errorNotExpectedCMDArg("--ccopy", "")
                            else if > feiFile == ""
                                then if feiFile = arguments.next(argumentIndex); < feiFile.hasPrefix?("-")
                                    then errorNotExpectedCMDArg(feiFile, "")
                                else errorNotExpectedCMDArg(arguments[argumentIndex], "")
                    arguments.eoa!(argumentIndex)
                    if feiFile == ""
                        then feiFile = "release.fei"
                    result:data += feiFile
                    result:data += ccopy
                "install"
                    result:action = a_Install
                    result:data = arguments.next(argumentIndex).convertTo(BinaryData)
                    arguments.eoa!(argumentIndex)
                default
                    errorWrongCMDLineArg(arguments[0])

func next(arguments [[UInt8]], :argumentIndex UInt64) [UInt8]
    attributes
        alwaysInline
    if < argumentIndex >= arguments.getLength()
        then errorNotExpectedEOA()
    result = arguments[argumentIndex]
    argumentIndex++

func next?(arguments [[UInt8]], :argumentIndex UInt64, variant [UInt8]) Bool
    attributes
        alwaysInline
    if argumentIndex < arguments.getLength()
        then if arguments[argumentIndex] == variant
            then
                argumentIndex++
                return true

proc next!(arguments [[UInt8]], :argumentIndex UInt64, variant [UInt8])
    attributes
        alwaysInline
    if < !arguments.next?(argumentIndex, variant)
        then if argumentIndex < arguments.getLength()
            then errorNotExpectedCMDArg(arguments[argumentIndex], variant)
            else errorNotExpectedEOA()

func eoa?(arguments [[UInt8]], argumentIndex UInt64) Bool
    attributes
        alwaysInline
    result = argumentIndex >= arguments.getLength()

proc eoa!(arguments [[UInt8]], argumentIndex UInt64)
    if < !arguments.eoa?(argumentIndex)
        then errorNotExpectedCMDArg(arguments[argumentIndex], "")

proc showMessage(message [UInt8])
    attributes
        noInline
    message.printLn()
    exit()
