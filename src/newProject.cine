func mainFile() [UInt8]
    attributes
        alwaysInline
    result = {
        "proc main()\n"
        "    print(\042Hello world!\\n\042)\n"
    }

func releaseFeiProgramFile(programName [UInt8]) [UInt8]
    attributes
        alwaysInline
    result = {
        "program \042".join(programName, "\042\n"
        "flags\n"
        "    debug = \042disable\042\n\n"
        "version = \0420.1\042\n\n"
        "cCompilerOptions = \042-march=native -O2 -lm -w\042\n")
    }

func debugFeiProgramFile(programName [UInt8]) [UInt8]
    attributes
        alwaysInline
    result = {
        "program \042".join(programName, "-debug\042\n"
        "flags\n"
        "    debug = \042enable\042\n\n"
        "version = \0420.1\042\n\n"
        "cCompilerOptions = \042-march=native -O1 -lm -Wall -Wpedantic -Wextra -Wno-visibility -Wno-missing-braces -Wno-gnu-compound-literal-initializer -Wno-unused-variable -Wno-unused-parameter -Wno-format-security -Wno-implicitly-unsigned-literal -Wno-unused-function\042\n")
    }

func releaseFeiModuleFile(moduleName [UInt8]) [UInt8]
    attributes
        alwaysInline
    result = {
        "module \042".join(moduleName, "\042\n",
        "version = \0420.1\042\n\n")
    }

proc createProject()
    parse _, directoryName <- [[UInt8]]{"./src", "./pkgs", "./modules", "./resources"}
        if < !makeDirectory(directoryName, true)
            then errorCantMakeDirectory(directoryName)
    if standartModule .= getResource("standart-0.1.fpkg"); > standartModule.item?()
        then makeFile("./modules/standart-0.1.fpkg", standartModule[].convertTo([UInt8]))
        else panic("There is no standard module in resources.")

proc createNewProgram(data BinaryData)
    createProject()
    programName .= data.convertTo([UInt8])
    makeFile("./src/main.cine", mainFile())
    makeFile("./release.fei", releaseFeiProgramFile(programName))
    makeFile("./debug.fei", debugFeiProgramFile(programName))

proc createNewModule(data BinaryData)
    createProject()
    moduleName .= data.convertTo([UInt8])
    makeFile("./release.fei", releaseFeiModuleFile(moduleName))
