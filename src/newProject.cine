func mainFile() [UInt8]
    attributes
        alwaysInline
    result = {
        "proc main()\n"
        "    print(\042Hello world!\\n\042)\n"
    }

func releaseFeiFile(projectName [UInt8]) [UInt8]
    attributes
        alwaysInline
    result = {
        "sources\n"
        "    \042-standart\042\n"
        "    \042./src/\042\n"
        "    \042./main.cine\042\n\n"
        "flags\n"
        "    debug = false\n\n"
        "version = \0420.1\042\n\n"
        "cCompilerOptions = \042-march=native -O2 -lm -w\042\n"
        "executable = \042".join(
        projectName,
        "\042\n")
    }

func debugFeiFile(projectName [UInt8]) [UInt8]
    attributes
        alwaysInline
    result = {
        "sources\n"
        "    \042-standart\042\n"
        "    \042./src/\042\n"
        "    \042./main.cine\042\n\n"
        "flags\n"
        "    debug = true\n\n"
        "version = \0420.1\042\n\n"
        "cCompilerOptions = \042-march=native -O1 -lm -Wall -Wpedantic -Wextra -Wno-visibility -Wno-missing-braces -Wno-gnu-compound-literal-initializer -Wno-unused-variable -Wno-unused-parameter -Wno-format-security -Wno-implicitly-unsigned-literal -Wno-unused-function\042\n"
        "executable = \042".join(
        projectName,
        "-debug"
        "\042\n")
    }

proc createNewProject(projectName [UInt8])
    if < !makeDirectory("./src", true)
        then errorCantMakeDirectory("./src")
    if < !makeDirectory("./pkgs", true)
        then errorCantMakeDirectory("./pkgs")
    makeFile("./main.cine", mainFile())
    makeFile("./release.fei", releaseFeiFile(projectName))
    makeFile("./debug.fei", debugFeiFile(projectName))
